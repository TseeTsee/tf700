### FILE INFO:
#
# AROMA Installer 2.51
#       (c) 2011-2012 by Ahmad Amarullah
#           amarullz - xda-developers
#           http://www.amarullz.com/
#
#       Binary Version  : 2.56
#       Binary Codename : Edelweis
#
# tf700 dualboot installer configuration
#

# Initializing Rom Information
ini_set("rom_name",    "TF700 Dualboot Installer");
ini_set("rom_version", "v0.8.0");
ini_set("rom_author",  "rabits");
ini_set("rom_device",  "Asus Transformer TF700/T");
ini_set("rom_date",    "05/02/2013");


# Show Splash
splash(
    2000,
    "logo"
);

#-- Extract cool busybox to /tmp/aroma/busybox
restotmp("exec/busybox","busybox");

# Set Small Font to Support all fonts
fontresload( "0", "ttf/Roboto-Regular.ttf;ttf/DroidSansArabic.ttf;ttf/DroidSansFallback.ttf;", "12" );

###################################################################################################################
# Set language
#
selectbox(
    "Select Language...",
    "Please select installer language:",
    "@default",
    "lang.prop",
  
    "English", "Welcome to Installer",          1, #-- "selected.0" == "1"
    "Русский", "Добро пожаловать в установщик", 0  #-- "selected.0" == "2"
);

# SET LANGUAGE & FONT FAMILY
if prop("lang.prop","selected.0")=="1" then
  loadlang("langs/en.lang");
endif;

if prop("lang.prop","selected.0")=="2" then
  loadlang("langs/ru.lang");
endif;

fontresload( "0", "ttf/Roboto-Regular.ttf", "12" ); #-- "0" = Small Font
fontresload( "1", "ttf/Roboto-Regular.ttf", "18" ); #-- "1" = Big Font

###################################################################################################################
# Print welcome screen
#
textbox(
    "<~welcome.title>",
    "<~welcome.text1> <b>"+
      ini_get("rom_name")+
    "</b> <~common.for> <b>"+ini_get("rom_device")+"</b>.\n\n",
    "@welcome",
    "<b><~welcome.installerinfo></b>:\n"+
      "  <~welcome.version>\t: <b><#selectbg_g>"+ini_get("rom_version")+"</#></b>\n" +
      "  <~welcome.updated>\t: <b><#selectbg_g>"+ini_get("rom_date")+"</#></b>\n" +
    "<b><~welcome.deviceinfo></b>:\n" +
      "  <~welcome.model>\t: <b><#selectbg_g>"+sysprop("ro.product.model")+"</#></b>\n" +
      "  <~welcome.name>\t: <b><#selectbg_g>"+sysprop("ro.product.name")+"</#></b>\n" +
      "  <~welcome.device>\t: <b><#selectbg_g>"+sysprop("ro.product.device")+"</#></b>\n" +
      "  <~welcome.board>\t: <b><#selectbg_g>"+sysprop("ro.product.board")+"</#></b>\n" +
      "  <~welcome.manufacturer>\t: <b><#selectbg_g>"+sysprop("ro.product.manufacturer")+"</#></b>\n\n" +
    "<~welcome.multiline>\n\n" +
    "<~welcome.next>"
);


###################################################################################################################
# Test device
#
if sysprop("ro.product.device")!="tf700" then
    if sysprop("ro.product.device")!="tf700t" then
        alert(
            "<~common.warning>",
            "<~isnotokdevice.info1>" + sysprop("ro.product.device") + "<~isnotokdevice.info2>" ,
            "@alert"
        );
    endif;
endif;

###################################################################################################################
# Some agreement
#
checkviewbox(
    "<~terms.title>",
    "<b><~terms.desc></b>\n\n<~terms.info>",
    "@license",
    "<~terms.check>",
    "0",
    "terms_agreed"
);
if getvar("terms_agreed")!="1" then
    if confirm("<~terms.notconfirm.title>", "<~terms.notconfirm.info>", "@alert")=="yes" then
        exit();
    else
        back("1")
    endif;
endif;


###################################################################################################################
# Select kernel configuration
#
selectbox(
    "<~kernel.title>",
    "<~kernel.info>",
    "@personalize",
    "kernel.prop",
    "TF700: Clemsyn 1.5 - 1.8GHz CPU 650MHz GPU", "", 1, #-- "selected.0" == "1"
    "TF700: Clemsyn 1.3 - 1.8GHz CPU 650MHz GPU", "", 0, #-- "selected.0" == "2"
    "TF700: Clemsyn 1.3 - 1.5GHz CPU 650MHz GPU", "", 0  #-- "selected.0" == "3"
);

###################################################################################################################
# Destination of img selection
# * to virtual image in device main memory mmcblk0p8
# * to sdcard sda1
# * to sdcard sdb1
# * to msdcard mmcblk1
# * do not install image
#
setvar(
    "available_disks_retstatus",
    resexec("exec/available_disks.sh")
);
writetmpfile(getvar("sdcard_location")+"linux-debug-available_disks.log", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));

if cmp("1","==", getvar("available_disks_retstatus")) then
    alert(
        "<~common.error>",
        "<~nodiskavailable.info>",
        "@alert"
    );
    back("6"); #-- Go back to device select
endif;

selectbox(
    "<~rootfs.title>",
    "<~rootfs.info>",
    "@default",
    "rootfs.prop",
    #-- "selected.0" == "1"
    "<~rootfs.itemskip_title>", "<~rootfs.itemskip_info>", 0,
    #-- "selected.0" == "2" Used by "Options"
    "/sdcard/linux-rootfs.img "+file_getprop("/tmp/available_disks.prop","available.mmcblk0p8.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.mmcblk0p8")
        +"Mb <~common.total>)", "<~rootfs.item1_info>", 1,
    #-- "selected.0" == "?" Used by available_size.sh
    "/dev/sda1"+file_getprop("/tmp/available_disks.prop","available.sda.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.sda")
        +"Mb <~common.total>)", "<~rootfs.item2_info>", iif(cmp("1","<=", file_getprop("/tmp/available_disks.prop","available.sda")),0,3),
    #-- "selected.0" == "?" Used by available_size.sh
    "/dev/sdb1"+file_getprop("/tmp/available_disks.prop","available.sdb.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.sdb")
        +"Mb <~common.total>)", "<~rootfs.item3_info>", iif(cmp("1","<=", file_getprop("/tmp/available_disks.prop","available.sdb")),0,3),
    #-- "selected.0" == "?" Used by available_size.sh
    "/dev/mmcblk1p1"+file_getprop("/tmp/available_disks.prop","available.mmcblk1.info")
        +" ("+file_getprop("/tmp/available_disks.prop","available.mmcblk1")
        +"Mb <~common.total>)", "<~rootfs.item4_info>", iif(cmp("1","<=", file_getprop("/tmp/available_disks.prop","available.mmcblk1")),0,3)
);

if cmp("1","!=", prop("rootfs.prop","selected.0")) then
    ###################################################################################################################
    # Options
    # [] Use mmcblk0p8 as /home
    # [] Encrypt rootfs disk
    # - VD Suboptions
    # [] Do not replace virtual disk image
    #
    checkbox(
        "<~options.title>",
        "<~options.info>",
        "@update",
        "options.prop",

        "<~options.item1_title>", "<~options.item1_info>", 1, #-- item.0.1
        "<~options.item2_title>", "<~options.item2_info>", 0, #-- item.0.2
        "<~options.vd_title>", "<~options.vd_info>", iif(cmp("2","==", prop("rootfs.prop","selected.0")),2,3), #-- item.1
        "<~options.vd_item1_title>", "<~options.vd_item1_info> /sdcard/linux/rootfs.img <~common.to> /sdcard/linux/rootfs-old.img", iif(cmp("2","==", prop("rootfs.prop","selected.0")),1,3) #-- item.1.1 used by exec/available_space.sh
    );

    ###################################################################################################################
    # Image size
    #
    setvar(
        "available_space_retstatus",
        resexec("exec/available_space.sh")
    );
    writetmpfile(getvar("sdcard_location")+"linux-debug-available_space.log", getvar("exec_buffer")+"\n\n<b>RETURN STATUS : "+getvar("resexec_retstatus"));

    if cmp("3",">", getvar("available_space_retstatus")) then
        alert(
            "<~common.error>",
            "<~nospaceavailable.info1> " + getvar("available_space_retstatus") + "Gb <~nospaceavailable.info2>",
            "@alert"
        );
        back("2"); #-- Go back to device select
    endif;

    selectbox(
        "<~rootsize.title>",
        "<~rootsize.info>",
        "@default",
        "rootsize.prop",
        "3 Gb", "",  1,  #-- "selected.0" == "1"
        "4 Gb", "",  iif(cmp("4","<=", getvar("available_space_retstatus")),1,3),  #-- "selected.0" == "2"
        "5 Gb", "",  iif(cmp("5","<=", getvar("available_space_retstatus")),1,3),  #-- "selected.0" == "3"
        "6 Gb", "",  iif(cmp("6","<=", getvar("available_space_retstatus")),0,3),  #-- "selected.0" == "4"
        "7 Gb", "",  iif(cmp("7","<=", getvar("available_space_retstatus")),0,3),  #-- "selected.0" == "5"
        "8 Gb", "",  iif(cmp("8","<=", getvar("available_space_retstatus")),0,3),  #-- "selected.0" == "6"
        "10 Gb", "", iif(cmp("10","<=", getvar("available_space_retstatus")),0,3), #-- "selected.0" == "7"
        "12 Gb", "", iif(cmp("12","<=", getvar("available_space_retstatus")),0,3), #-- "selected.0" == "8"
        "15 Gb", "", iif(cmp("15","<=", getvar("available_space_retstatus")),0,3), #-- "selected.0" == "9"
        "20 Gb", "", iif(cmp("20","<=", getvar("available_space_retstatus")),0,3)  #-- "selected.0" == "10"
    );
endif;

###################################################################################################################
# Preferences setting print, red button to install
#
ini_set("text_next", "<~ready.install>");
viewbox(
    "<~ready.title>",
    "<~ready.info>\n\n<~ready.endinfo> <b><~ready.install></b> <~ready.endinfo2> <b><~text_back></b>.",
    "@install"
);

ini_set("text_next", "<~text_next.default>");

###################################################################################################################
# INSTALLATION PROCESS
#
setvar("retstatus",
  install(
      "<~install.title>",
      "<b>"+ini_get("rom_name")+"</b> <~install.info> (~10 <~common.min>)",
      "@install",
      "<~install.finish> <b>"+ini_get("rom_name")+"</b>. <~install.finish2> Next <~install.finish3>"
  )
);

###################################################################################################################
# Finish screen
#
ini_set("text_next", "Finish");
checkviewbox(
    "<~finish.title>",
    "<#selectbg_g><b><~finish.congrat></b></#>\n\n"+
    "<b>"+ini_get("rom_name")+"</b> <~finish.info>: "+getvar("retstatus")+"\n\n",
    "@welcome",
    "<~finish.reboot>",
    "1",
    "reboot_it"
);

# Check if reboot checkbox was checked
if
  getvar("reboot_it")=="1"
then
  reboot("onfinish");
endif;

#---- FINISH
